on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      comment-id:
        required: true
        type: string
      file:
        required: true
        type: string
      network:
        required: true
        type: string
      fn:
        required: true
        type: string
      send:
        required: true
        type: string
      pull_request_number:
        required: true
        type: string
      delete-branch-after-send:
        required: true
        type: string
      github_repository:
        required: true
        type: string
      group_telegram_chat_id:
        required: true
        type: string
      announcement_telegram_chat_id:
        required: true
        type: string
      failure_telegram_chat_id:
        required: true
        type: string
      github_run_id:
        required: true
        type: string
      runs_on:
        required: true
        type: string
      runner_name:
        required: true
        type: string
      compiler_cache_version:
        required: true
        type: string
      brownie_cache_version:
        required: true
        type: string
      close_pr:
        required: true
        type: string
      github_workspace:
        required: true
        type: string
      check_reviews:
        required: true
        type: string
      home_path:
        required: true
        type: string
      cached_runner:
        required: true
        type: string
      be:
        required: true
        type: string
    secrets:
      TELEGRAM_TOKEN:
        required: true
      POLYGONSCAN_TOKEN:
        required: true
      FTMSCAN_TOKEN:
        required: true
      ETHERSCAN_TOKEN:
        required: true
      BSCSCAN_TOKEN:
        required: true
      ARBISCAN_TOKEN:
        required: true
      SNOWTRACE_TOKEN:
        required: true
      PRIVATE_KEY:
        required: true
      PAT:
        required: true

jobs:
  roboanimalsWorkflow:
    runs-on: ${{ inputs.runs_on }}
    timeout-minutes: 60
    steps:
    - uses: hmarr/debug-action@v2

    - uses: actions/checkout@v1
      with:
        ref: ${{ inputs.ref }}

    - uses: actions/github-script@v3
      id: get-pr-title
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (!pull.title) {
            return 'Empty Title ü§°';
          }
          return pull.title.replace(/\$/g, 'üí≤');

    - uses: actions/github-script@v3
      id: get-pr-body
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (!pull.body) {
            return 'Empty Description ü§°';
          }
          return pull.body.replace(/\r\n/g, ' üê∂ ').replace(/\$/g, 'üí≤');


    - uses: actions/github-script@v3
      id: get-pr-author
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (pull.user.login === null) {
            return 'Empty Author ü§°';
          }
          return pull.user.login;

    - uses: actions/github-script@v3
      if: ${{ inputs.check_reviews == 'true' }}
      id: get-pr
      env:
        WORKING_FOLDER: '${{inputs.github_workspace}}'
      with:
        script: |
          const {GITHUB_WORKSPACE} = process.env
          const script = require(`${GITHUB_WORKSPACE}/ci/getApprovals.js`)
          return await script(github, context, core, ${{ inputs.pull_request_number }}, ${{ steps.get-pr-author.outputs.result }})

    - name: 'check for reviews'
      if: ${{ inputs.check_reviews == 'true' && inputs.send  == 'true' && steps.get-pr.outputs.result < 1}}
      run: exit 1

    - name: 'fail on no reviews'
      if: ${{ inputs.check_reviews == 'true' && failure() }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Review requirement failed. Get at least one approval before sending.

    - name: Create URL to the run output
      id: vars
      run: echo ::set-output name=run-url::https://github.com/${{inputs.github_repository}}/actions/runs/${{inputs.github_run_id}}

    - name: Cache compiler installations
      if: ${{ inputs.cached_runner != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ${{inputs.home_path}}/.solcx
          ${{inputs.home_path}}/.vvm
        key: ${{ runner.os }}-${{ inputs.runner_name }}-compiler-cache-${{ inputs.compiler_cache_version }}

    - name: Setup node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install ganache
      run: npm install -g ganache-cli@beta

    - name: Set up python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Restore pip cache
      if: ${{ inputs.cached_runner != 'true' }}
      uses: actions/cache@v2
      id: pip-cache
      with:
        path: |
          ${{inputs.home_path}}/.cache/pip/
        key: ${{ runner.os }}-${{ inputs.runner_name}}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.runner_name}}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          ${{ runner.os }}-${{ inputs.runner_name}}-pip-

    - name: Install python dependencies
      if: ${{ inputs.cached_runner != 'true' }}
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install -r requirements-dev.txt

    - name: Lock on send=true to avoid nonce race condition
      if: ${{ inputs.send  == 'true' }}
      uses: shogo82148/actions-mutex@v1
      with:
        key: send-${{ inputs.network }}

    - name: cache brownie database
      if: ${{ inputs.cached_runner != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ${{inputs.home_path}}/.brownie
          !${{inputs.home_path}}/.brownie/accounts
        key: ${{ runner.os }}-${{ inputs.runner_name}}-brownie-cache-${{ inputs.brownie_cache_version }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.runner_name}}-brownie-cache-${{ inputs.brownie_cache_version }}
          ${{ runner.os }}-${{ inputs.runner_name}}-brownie-cache-*
          ${{ runner.os }}-${{ inputs.runner_name}}-brownie-cache

    - name: delete .brownie/accounts after cache download
      run: |
        rm -rf ~/.brownie/accounts
    
    - name: Add network config
      timeout-minutes: 1
      run: |
        brownie networks list true
        cp network-config.yaml ~/.brownie/
        brownie networks list true

    - name: Brownie compile
      timeout-minutes: 3
      run: |
        brownie compile

    - name: Run Function
      id: fn
      timeout-minutes: 45
      env:
        POLYGONSCAN_TOKEN: ${{ secrets.POLYGONSCAN_TOKEN }}
        FTMSCAN_TOKEN: ${{ secrets.FTMSCAN_TOKEN }}
        ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
        BSCSCAN_TOKEN: ${{ secrets.BSCSCAN_TOKEN }}
        ARBISCAN_TOKEN: ${{ secrets.ARBISCAN_TOKEN }}
        SNOWTRACE_TOKEN: ${{ secrets.SNOWTRACE_TOKEN }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        GITHUB_ACTION_SEND: ${{  inputs.send }}
        BE: ${{ inputs.be }}
      run: |
        python3 $GITHUB_WORKSPACE/ci/run_brownie.py brownie run ${{ inputs.file }} ${{ inputs.fn }} --network ${{ inputs.network }}-main-fork 1>output.txt 2>error.txt || EXIT_CODE=$?
        echo "::set-output name=brownie-exit-code::$EXIT_CODE"
        echo "::group:: Output"
        cat output.txt
        echo "::endgroup::"
        echo "::group:: Error"
        cat error.txt
        echo "::endgroup::"
        exit 0

    - name: Set timeout
      if: failure()
      id: timeout
      run: |
        echo "::group:: Output"
        cat output.txt
        echo "::endgroup::"
        echo "::group:: Error"
        cat error.txt
        echo "::endgroup::"
        echo "::set-output name=brownie-timeout::true"

    - name: Check failure
      id: failcheck
      run: |
        echo "::group:: Output"
        cat output.txt
        echo "::endgroup::"
        echo "::group:: Error"
        cat error.txt
        echo "::endgroup::"
        exit ${{ steps.fn.outputs.brownie-exit-code}}

    - name: Read nonce
      if: ${{ inputs.send  == 'true' }}
      id: nonce
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{inputs.home_path}}/nonce.txt
        trim: false

    - name: Nonce fail check
      if: ${{ failure() && steps.nonce.outcome == 'failure' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Did not find nonce.txt. Did you run with send=true without actually posting the transaction at the end of your function? Use the @safe decorator above your function.

    - name: Read safe link
      if: ${{ inputs.send  == 'true' }}
      id: read-safe-link
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{inputs.home_path}}/safe.txt
        trim: false

    - name: Safe url check
      if: ${{ inputs.send == true && failure() && steps.read-safe-link.outcome == 'failure' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Did not find safe.txt.

    - name: Edit comment with error message
      if: failure()
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Failure: check output ${{ steps.vars.outputs.run-url }}

    - name: Edit comment with dry run message
      if: ${{ inputs.send  == 'false' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Dry run success: ${{ steps.vars.outputs.run-url }}
          > Rerun the command with send=true to publish the TX to the safe
      continue-on-error: true

    - name: Set PR url
      id: pr-url
      run: |
        echo "::set-output name=pr-url::https://github.com/${{github.repository}}/pull/${{ inputs.pull_request_number }}/files"

    - name: Create Telegram message
      if: ${{ inputs.send  == 'true' }}
      id: telegram-message
      run: |
          TELEGRAM_MESSAGE=$(cat << EOF
          ‚úçÔ∏è [${{ inputs.network}} #${{ steps.nonce.outputs.content }}](${{ steps.read-safe-link.outputs.content }}) \`${{ steps.get-pr-title.outputs.result}}\`
          Sender: ${{ steps.get-pr-author.outputs.result }}
          Description: \`${{ steps.get-pr-body.outputs.result }}\`
          Review [the code](${{ steps.pr-url.outputs.pr-url }}), verify [the output](${{ steps.vars.outputs.run-url }}), and [sign here](${{ steps.read-safe-link.outputs.content }})
          EOF
          )
          echo "TELEGRAM_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$TELEGRAM_MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
  
    - name: New TX Telegram Alert - Robowoofy Alert Chat
      if: ${{ inputs.send == 'true' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ inputs.announcement_telegram_chat_id}}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          ${{ env.TELEGRAM_MESSAGE }}
      continue-on-error: true

    - name: New TX Telegram Alert - MultiSig Chat
      if: ${{ inputs.send == 'true' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ inputs.group_telegram_chat_id}}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          ${{ env.TELEGRAM_MESSAGE }}
      continue-on-error: true

    - name: Edit comment with full run message
      if: ${{ inputs.send  == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > TX with nonce ${{ steps.nonce.outputs.content }} successfully sent: ${{ steps.vars.outputs.run-url }}. 
          > Find your queued TX at ${{ steps.read-safe-link.outputs.content }}
          > Your PR has been labeled with tag ${{inputs.network}} ${{ steps.nonce.outputs.content }}, which you can find here: https://github.com/yearn/strategist-ms/labels?q=${{ steps.nonce.outputs.content }}
      continue-on-error: true

    - uses: actions-ecosystem/action-add-labels@v1
      if: ${{ inputs.send  == 'true' }}
      with:
        number: ${{ inputs.pull_request_number }}
        github_token: ${{ secrets.PAT }}
        labels: |
          ${{ inputs.network }} #${{ steps.nonce.outputs.content }}
      continue-on-error: true

    - uses: peter-evans/close-pull@v1
      if: ${{ inputs.send  == 'true' && inputs.close_pr == 'true'}}
      with:
        pull-request-number: ${{ inputs.pull_request_number }}
        comment: Auto-closing pull request
      continue-on-error: true

    - name: Delete PRs head branches
      if: ${{ inputs.delete-branch-after-send == 'true' && inputs.send  == 'true'}}
      uses: dawidd6/action-delete-branch@v3
      with:
        github_token: ${{ secrets.PAT }}
        numbers: ${{ inputs.pull_request_number }}
      continue-on-error: true

    - name: Add reaction
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        reaction-type: hooray
      continue-on-error: true

    - name: Telegram Alert On Infra Failure
      if: ${{ failure() && steps.failcheck.outcome == 'success' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ inputs.failure_telegram_chat_id}}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Grrrr grrrrr grrrrr ${{ steps.vars.outputs.run-url }} pipeline failed even though the brownie function succeeded!
      continue-on-error: true

    - name: Telegram Alert On Brownie Timeout
      if: ${{ failure() && steps.timeout.outputs.brownie-timeout == 'true' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ inputs.failure_telegram_chat_id }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Grrrr grrrrr grrrrr ${{ steps.vars.outputs.run-url }} brownie timed out!
      continue-on-error: true

    - name: cleanup files
      if: always()
      run: |
        rm -rf ~/.brownie/accounts
        rm -f ~/nonce.txt
        rm -f ~/alive.signal
        rm -f ~/safe.txt
      continue-on-error: true
